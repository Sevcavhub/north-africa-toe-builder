{
  "version": "1.0.0",
  "catalog_name": "TO&E Builder Agent Catalog",
  "last_updated": "2025-10-09",
  
  "agents": [
    {
      "agent_id": "document_parser",
      "category": "source_extraction",
      "role": "Parse source documents and extract raw facts",
      "inputs": ["source_pdf", "document_type", "target_nation", "target_quarter"],
      "outputs": ["raw_facts.json"],
      "capabilities": [
        "PDF text extraction",
        "Table parsing",
        "Figure/diagram interpretation",
        "Citation tracking"
      ],
      "prompt_template": "You are a military historian extracting data from {document_type}.\n\nTask: Extract ALL factual information about {nation} forces in {quarter}.\n\nFor each fact extracted, provide:\n1. The fact itself\n2. Source citation (page number, section)\n3. Confidence level (0-100)\n4. Category (personnel|equipment|organization|command)\n\nOutput format: JSON array of facts\n\nExample:\n{\n  \"fact_type\": \"command\",\n  \"data\": {\n    \"unit\": \"XXI Corpo d'Armata\",\n    \"commander\": \"Generale di Corpo d'Armata Lorenzo Dalmazzo\",\n    \"rank\": \"Generale di Corpo d'Armata\"\n  },\n  \"source\": \"TM E 30-420, page 45, section 2.3\",\n  \"confidence\": 95\n}\n\nExtract facts now from: {source_content}",
      "validation_rules": [
        "All facts must have source citations",
        "Confidence must be 0-100",
        "No hallucinated data"
      ]
    },
    
    {
      "agent_id": "historical_research",
      "category": "source_extraction",
      "role": "Cross-reference facts across multiple sources",
      "inputs": ["raw_facts.json", "additional_sources[]"],
      "outputs": ["verified_facts.json", "conflicts.json"],
      "capabilities": [
        "Multi-source verification",
        "Conflict identification",
        "Best estimate selection",
        "Source quality ranking"
      ],
      "prompt_template": "You are verifying historical facts across multiple sources.\n\nPrimary facts: {raw_facts}\nAdditional sources: {source_list}\n\nTask: For each fact, verify against additional sources and identify:\n1. Confirming sources\n2. Conflicting information\n3. Best estimate if conflicts exist\n4. Updated confidence level\n\nOutput verified facts with all supporting/conflicting citations.",
      "validation_rules": [
        "Conflicts must be explicitly flagged",
        "At least 2 sources per critical fact",
        "Confidence adjusted based on source agreement"
      ]
    },
    
    {
      "agent_id": "org_hierarchy",
      "category": "structure_organization",
      "role": "Build organizational tree from Theater to Squad",
      "inputs": ["verified_facts.json", "nation", "quarter"],
      "outputs": ["org_tree.json"],
      "capabilities": [
        "Hierarchy construction",
        "Parent-child relationship mapping",
        "Commander assignment",
        "Unit naming normalization"
      ],
      "prompt_template": "You are building the complete organizational hierarchy for {nation} in {quarter}.\n\nFacts available: {verified_facts}\n\nTask: Construct organizational tree from Theater level down to Squad level.\n\nFor each level, identify:\n1. Unit designation\n2. Unit type\n3. Commander (name and rank)\n4. Parent formation\n5. Subordinate units\n6. Personnel strength\n\nOutput: Hierarchical JSON structure\n\nExample:\n{\n  \"level\": \"corps\",\n  \"unit_designation\": \"XXI Corpo d'Armata\",\n  \"commander\": {\"name\": \"...\", \"rank\": \"...\"},\n  \"parent\": \"10th Army\",\n  \"subordinates\": [\n    {\"unit\": \"Sirte Division\", \"strength\": 8000}\n  ]\n}\n\nBuild complete hierarchy now.",
      "validation_rules": [
        "Every unit must have a parent (except theater)",
        "Subordinate counts must match organizational doctrine",
        "Personnel strengths must be provided"
      ]
    },
    
    {
      "agent_id": "toe_template",
      "category": "structure_organization",
      "role": "Create standard unit templates for reuse",
      "inputs": ["nation", "quarter", "unit_type", "doctrine_sources"],
      "outputs": ["templates/{unit_type}_template.json"],
      "capabilities": [
        "Doctrine interpretation",
        "Standard TO&E creation",
        "Equipment allocation patterns",
        "Personnel position definition"
      ],
      "prompt_template": "You are creating a standard TO&E template for {nation} {unit_type} in {quarter}.\n\nDoctrine sources: {doctrine_sources}\n\nTask: Define the STANDARD organization for this unit type:\n\n1. Personnel structure (officers, NCOs, enlisted)\n2. Standard equipment allocation\n3. Weapons per position\n4. Vehicle/transport allocation\n5. Tactical organization (squads, sections, platoons)\n6. Individual positions (for squad templates)\n\nFor squad templates, define EACH position:\n- Position name\n- Rank\n- Primary weapon (with WITW ID if available)\n- Secondary weapons/equipment\n- Ammunition load\n- Responsibilities\n\nOutput: Complete template following unified TO&E schema.\n\nCreate template now.",
      "validation_rules": [
        "Template must conform to unified TO&E schema",
        "All positions must have weapons assigned",
        "Equipment totals must be calculable"
      ]
    },
    
    {
      "agent_id": "unit_instantiation",
      "category": "structure_organization",
      "role": "Create specific unit instances from templates",
      "inputs": ["template.json", "org_tree.json", "unit_specific_data", "parent_unit"],
      "outputs": ["{unit_designation}_toe.json"],
      "capabilities": [
        "Template instantiation",
        "Unit-specific modifications",
        "Parent reference linking",
        "Unique ID assignment"
      ],
      "prompt_template": "You are creating a specific unit instance from a template.\n\nTemplate: {template}\nUnit designation: {unit_designation}\nParent unit: {parent_unit}\nSpecific modifications: {modifications}\n\nTask: Create unit-specific TO&E JSON:\n\n1. Apply template as base\n2. Add unit-specific information:\n   - Actual commander name\n   - Actual personnel count (if different from template)\n   - Equipment variations\n   - Parent formation reference\n3. Maintain full SCM-level detail\n4. Add unit-specific tactical notes\n\nOutput: Complete unit TO&E following unified schema.\n\nCreate unit instance now.",
      "validation_rules": [
        "Must reference parent unit correctly",
        "All required SCM fields must be present",
        "Template deviations must be documented"
      ]
    },
    
    {
      "agent_id": "theater_allocator",
      "category": "equipment_distribution",
      "role": "Distribute theater SCM totals across divisions",
      "inputs": ["theater_scm.json", "org_tree.json", "historical_allocation_data"],
      "outputs": ["division_equipment_allocations.json"],
      "capabilities": [
        "Top-down equipment distribution",
        "Historical allocation pattern matching",
        "Priority unit identification",
        "Equipment variant distribution"
      ],
      "prompt_template": "You are distributing theater-level equipment across divisions.\n\nTheater totals: {theater_scm}\nDivisions: {division_list}\nHistorical patterns: {allocation_patterns}\n\nTask: Distribute ALL theater equipment to divisions based on:\n\n1. Division type (armor/infantry/colonial)\n2. Historical priorities\n3. Operational role\n4. Equipment availability dates\n\nRules:\n- Sum of all divisions MUST equal theater total\n- Variant-specific (e.g., 'F2 guns go to elite units')\n- Realistic allocations per division type\n- Account for corps-level equipment\n\nOutput: Equipment allocation per division with justification.\n\nDistribute equipment now.",
      "validation_rules": [
        "Sum of divisions = theater total (within 5%)",
        "All equipment variants accounted for",
        "Allocations match historical patterns"
      ]
    },
    
    {
      "agent_id": "division_cascader",
      "category": "equipment_distribution",
      "role": "Cascade division equipment down to regiment/battalion/company/squad",
      "inputs": ["division_toe.json", "subordinate_units[]", "distribution_doctrine"],
      "outputs": ["regiment_equipment.json", "battalion_equipment.json", "company_equipment.json", "squad_equipment.json"],
      "capabilities": [
        "Equipment cascading",
        "TO&E ratio application",
        "Company-level distribution",
        "Squad-level allocation"
      ],
      "prompt_template": "You are cascading equipment from division level down through the hierarchy.\n\nDivision equipment: {division_equipment}\nSubordinate structure: {org_structure}\nDistribution doctrine: {doctrine}\n\nTask: Distribute division equipment to all subordinate units:\n\nDivision → Regiments\nRegiments → Battalions\nBattalions → Companies\nCompanies → Platoons\nPlatoons → Squads\n\nRules:\n- Use historical TO&E ratios\n- Consider unit specialization (HQ company vs rifle company)\n- Maintain full SCM detail at each level\n- Sum of children MUST equal parent\n\nFor squads, assign equipment to individual positions.\n\nOutput: Complete equipment allocation for all subordinate units.\n\nDistribute now.",
      "validation_rules": [
        "Parent-child equipment totals match",
        "All variants distributed",
        "Squad positions have individual weapons"
      ]
    },
    
    {
      "agent_id": "equipment_reconciliation",
      "category": "equipment_distribution",
      "role": "Verify equipment totals at all levels",
      "inputs": ["all_unit_toe_files[]"],
      "outputs": ["reconciliation_report.json", "corrections.json"],
      "capabilities": [
        "Multi-level aggregation checking",
        "Discrepancy identification",
        "Correction suggestion",
        "Confidence scoring"
      ],
      "prompt_template": "You are verifying equipment totals across all organizational levels.\n\nAll unit files: {unit_files}\n\nTask: For each equipment category, verify:\n\nSquad → Platoon → Company → Battalion → Regiment → Division → Corps → Theater\n\nCheck:\n1. Do all subordinate units sum to parent?\n2. Are there any missing units?\n3. Are there any double-counted items?\n4. Do variant counts match across levels?\n\nOutput: Reconciliation report with:\n- ✓ Verified totals (perfect match)\n- ⚠ Minor discrepancies (< 5% difference)\n- ❌ Major errors (> 5% difference)\n- Suggested corrections\n\nGenerate report now.",
      "validation_rules": [
        "All equipment paths traced",
        "Discrepancies quantified",
        "Correction suggestions feasible"
      ]
    },
    
    {
      "agent_id": "bottom_up_aggregator",
      "category": "aggregation_calculation",
      "role": "Aggregate squad data up to theater SCM",
      "inputs": ["squad_toe_files[]", "org_tree.json"],
      "outputs": ["aggregated_units[]", "theater_scm.json"],
      "capabilities": [
        "Multi-level summation",
        "Variant aggregation",
        "Personnel rollup",
        "Top-3 weapon calculation"
      ],
      "prompt_template": "You are aggregating unit data from squads up to theater level.\n\nSquad files: {squad_files}\nOrganization tree: {org_tree}\n\nTask: For each organizational level, calculate:\n\n1. Total personnel (sum of subordinates + HQ)\n2. Top 3 infantry weapons (aggregate all subordinates)\n3. Equipment by variant (sum across all subordinates)\n4. Vehicles by type\n5. Artillery by caliber\n6. Aircraft by type\n\nProcess:\n- Start with squads\n- Aggregate to platoons\n- Platoons → Companies\n- Companies → Battalions\n- Battalions → Regiments\n- Regiments → Divisions\n- Divisions → Corps\n- Corps → Theater SCM\n\nOutput: Complete unit files at each level with full SCM detail.\n\nAggregate now.",
      "validation_rules": [
        "No equipment lost in aggregation",
        "All variants preserved",
        "Top 3 weapons correctly calculated"
      ]
    },
    
    {
      "agent_id": "top3_calculator",
      "category": "aggregation_calculation",
      "role": "Calculate top 3 infantry weapons at each level",
      "inputs": ["unit_equipment.json", "subordinate_weapons[]"],
      "outputs": ["top_3_infantry_weapons"],
      "capabilities": [
        "Weapon counting across units",
        "Sorting by count",
        "Type classification",
        "WITW ID lookup"
      ],
      "prompt_template": "You are calculating the top 3 infantry weapons for a unit.\n\nAll weapons in unit: {weapon_list}\n\nTask: Identify top 3 infantry weapons by count:\n\n1. Count all infantry weapons (rifles, MGs, SMGs, pistols, AT rifles)\n2. Exclude artillery, vehicle weapons, grenades\n3. Sort by total count\n4. Return top 3 with:\n   - Weapon name\n   - Total count\n   - Weapon type\n   - WITW ID (if available)\n\nOutput: top_3_infantry_weapons object matching SCM schema\n\nCalculate now.",
      "validation_rules": [
        "Only infantry weapons counted",
        "Correct sorting by count",
        "Types properly classified"
      ]
    },
    
    {
      "agent_id": "schema_validator",
      "category": "validation",
      "role": "Validate JSON against unified TO&E schema",
      "inputs": ["unit_toe.json", "schema_definition"],
      "outputs": ["validation_result.json"],
      "capabilities": [
        "Schema compliance checking",
        "Required field verification",
        "Data type validation",
        "Validation rule enforcement"
      ],
      "prompt_template": "You are validating a unit TO&E file against the unified schema.\n\nUnit file: {unit_file}\nSchema: {schema}\n\nTask: Check ALL requirements:\n\n1. Required fields present\n2. Data types correct\n3. Validation rules satisfied:\n   - tanks.total = sum(heavy + medium + light)\n   - total_personnel ≈ officers + ncos + enlisted (±5%)\n   - ground_vehicles_total ≥ sum(all vehicle categories)\n   - artillery_total ≥ sum(field + AT + AA)\n   - aircraft_total ≥ sum(fighters + bombers + recon + transport)\n4. Allowed values respected\n5. References valid (parent units exist)\n\nOutput: Validation report with:\n- ✓ Passed checks\n- ❌ Failed checks with details\n- ⚠ Warnings (non-critical issues)\n\nValidate now.",
      "validation_rules": [
        "All schema rules checked",
        "Clear error messages",
        "Severity levels assigned"
      ]
    },
    
    {
      "agent_id": "historical_accuracy",
      "category": "validation",
      "role": "Verify data matches historical records",
      "inputs": ["unit_toe.json", "historical_sources[]"],
      "outputs": ["accuracy_report.json"],
      "capabilities": [
        "Historical cross-referencing",
        "Anachronism detection",
        "Equipment availability checking",
        "Doctrine compliance"
      ],
      "prompt_template": "You are verifying historical accuracy of unit data.\n\nUnit: {unit_designation}\nQuarter: {quarter}\nData: {unit_data}\nSources: {historical_sources}\n\nTask: Verify:\n\n1. Equipment existed in this time period\n   - Check equipment introduction dates\n   - Flag anachronisms\n2. Quantities realistic for unit type\n3. Commander names correct\n4. Organizational structure matches doctrine\n5. Equipment variants appropriate\n\nOutput: Accuracy assessment with:\n- Confidence score (0-100)\n- Historical issues found\n- Supporting evidence\n- Recommended corrections\n\nVerify now.",
      "validation_rules": [
        "All equipment checked for period accuracy",
        "Commander names verified",
        "Doctrine conformance assessed"
      ]
    },
    
    {
      "agent_id": "book_chapter_generator",
      "category": "output_generation",
      "role": "Generate MDBook chapters from unit TO&E files",
      "inputs": ["unit_toe.json", "chapter_type", "style_guide"],
      "outputs": ["chapter.md"],
      "capabilities": [
        "Markdown generation",
        "Table formatting",
        "Narrative synthesis",
        "Equipment summary creation"
      ],
      "prompt_template": "You are generating a book chapter for {unit_designation}.\n\nUnit data: {unit_toe}\nChapter type: {chapter_type}\nStyle: Professional military history, engaging narrative\n\nTask: Generate markdown chapter with ALL 16 REQUIRED SECTIONS:\n\n1. Header with unit designation and type\n2. Division/Unit Overview (brief narrative introduction)\n3. Command section (commander, HQ, strength)\n4. Personnel strength table\n5-8. Equipment sections with VARIANT BREAKDOWNS AND DETAIL SECTIONS (Armoured, Artillery, Armoured Cars, Infantry Weapons, Transport)\n9. Organizational breakdown (subordinate units)\n10. Supply status\n11. Tactical doctrine section\n12. Critical Equipment Shortages (mission-limiting deficiencies)\n13. Historical context for the quarter\n14. Wargaming data\n15. Data Quality & Known Gaps (confidence score, sources, gaps by priority)\n16. Conclusion with data source footer\n\nCRITICAL - Equipment Table Format with Detail Sections:\n\n## TANKS - Use variant breakdown table + detail section for EACH variant:\n\n| Category | Total | Operational | Readiness |\n|----------|-------|-------------|-----------|\n| **All Tanks** | **228** | **220** | **96.5%** |\n| **Medium Tanks (Cruisers)** | **69** | **66** | **95.7%** |\n| ↳ A13 Mk II (Cruiser Mk IV) | 44 | 42 | 95.5% |\n| ↳ A10 Cruiser Mk II | 10 | 10 | 100% |\n| ↳ Matilda II (Infantry Tank) | 6 | 6 | 100% |\n\nThen IMMEDIATELY follow with detail sections:\n\n### A13 Mk II (Cruiser Mk IV) - 44 tanks\n[Specifications, combat performance, notes]\n\n### A10 Cruiser Mk II - 10 tanks\n[Specifications, combat performance, notes]\n\n### Matilda II (Infantry Tank) - 6 tanks\n[Specifications, combat performance, notes]\n\n## ARTILLERY - EVERY variant gets a detail section:\n\n| Type | Total | Operational | Caliber |\n| **Field Artillery** | **96** | **96** | - |\n| ↳ Ordnance QF 25-pounder | 72 | 72 | 87.6mm |\n| ↳ QF 4.5-inch Howitzer | 24 | 24 | 114mm |\n\nThen detail sections:\n\n### Ordnance QF 25-pounder - 72 guns\n[Range, projectile weight, rate of fire, combat performance]\n\n### QF 4.5-inch Howitzer - 24 guns\n[Range, projectile weight, rate of fire, combat performance]\n\n### Ordnance QF 2-pounder - 48 guns (anti-tank)\n[Penetration, rate of fire, role]\n\n### Bofors 40mm - 36 guns (anti-aircraft)\n[Rate of fire, ceiling, effectiveness]\n\n## ARMORED CARS - Separate section, EVERY variant detailed:\n\n| Type | Count | Role | Unit |\n| ↳ Morris CS9 | 45 | Reconnaissance | 11th Hussars |\n\n### Morris CS9 - 45 vehicles\n[Armament, armor, crew, speed, combat record]\n\n### Rolls-Royce Armoured Car - 30 vehicles\n[Armament, armor, crew, speed, combat record]\n\n## TRANSPORT & VEHICLES - EXCLUDE Tanks and Armored Cars, EVERY variant detailed:\n\n| Category | Count | Percentage |\n| **Trucks** | **1,400** | 55.2% |\n| ↳ Bedford QL | 800 | 3 ton |\n| ↳ Bedford MW | 400 | 15 cwt |\n\n### Bedford QL - 800 trucks\n[Capacity, role, specifications]\n\n### Bedford MW - 400 trucks\n[Capacity, role, specifications]\n\n### BSA M20 - 200 motorcycles\n[Engine, use, specifications]\n\n### Universal Carrier (Bren Carrier) - 468 vehicles\n[Armament, armor, crew, speed, role]\n\nKEY RULES:\n- Show category totals in BOLD\n- Use ↳ symbol for variant sub-items\n- EVERY variant in table MUST have detail section immediately after table\n- Tanks and Armored Cars excluded from Transport & Vehicles table\n- Detail sections include: specifications, combat performance/role, notes\n- WITW IDs in parentheses where available\n\nStyle requirements:\n- Professional but engaging\n- Bold key facts for scannability\n- Complete detail for ALL variants\n- Individual soldier positions for squads\n- Match MDBOOK_CHAPTER_TEMPLATE.md exactly\n\nGenerate chapter now.",
      "validation_rules": [
        "All required sections present",
        "Tables properly formatted",
        "Cross-references valid"
      ]
    },
    
    {
      "agent_id": "scenario_exporter",
      "category": "output_generation",
      "role": "Export unit data for wargaming scenarios",
      "inputs": ["unit_toe.json", "scenario_format"],
      "outputs": ["scenario.{format}"],
      "capabilities": [
        "Multi-format export",
        "OOB generation",
        "Scenario balancing",
        "WITW integration"
      ],
      "prompt_template": "You are creating a wargaming scenario from unit data.\n\nUnit: {unit_toe}\nFormat: {format}\nScenario type: {scenario_type}\n\nTask: Export unit data in requested format:\n\nFor WITW CSV:\n- Map each equipment item to WITW ID\n- Create force pool entries\n- Set experience/morale levels\n- Add special rules\n\nFor generic JSON:\n- Include all equipment with counts\n- Add wargaming stats\n- Provide setup recommendations\n- Include victory conditions\n\nOutput: Scenario file in requested format.\n\nGenerate now.",
      "validation_rules": [
        "All equipment mapped to game IDs",
        "Format specification followed",
        "Scenario balanced"
      ]
    },
    
    {
      "agent_id": "sql_populator",
      "category": "output_generation",
      "role": "Generate SQL INSERT statements for database",
      "inputs": ["unit_toe_files[]", "db_schema"],
      "outputs": ["insert_statements.sql"],
      "capabilities": [
        "SQL generation",
        "Relationship mapping",
        "Foreign key management",
        "Batch insert optimization"
      ],
      "prompt_template": "You are generating SQL INSERT statements from unit TO&E files.\n\nUnits: {unit_files}\nDatabase schema: {db_schema}\n\nTask: Generate SQL to populate:\n\nTables:\n- units (unit_id, designation, type, parent_id, quarter, nation)\n- commanders (commander_id, name, rank, unit_id)\n- personnel (unit_id, officers, ncos, enlisted)\n- equipment (unit_id, equipment_type, variant, count, witw_id)\n- weapons (unit_id, weapon_name, count, weapon_type)\n- vehicles (unit_id, vehicle_type, variant, count)\n- individual_positions (unit_id, position_num, rank, weapon, ammo)\n\nEnsure:\n- Proper foreign key relationships\n- Batch inserts for performance\n- Handle NULL values appropriately\n- Include indexes for common queries\n\nGenerate SQL now.",
      "validation_rules": [
        "All relationships preserved",
        "No orphaned records",
        "Indexes created"
      ]
    },

    {
      "agent_id": "qa_auditor",
      "category": "quality_assurance",
      "role": "Orchestrator for project-level QA - coordinates specialized sub-tasks",
      "workflow_pattern": "orchestrator-workers",
      "inputs": ["project_directory", "audit_scope"],
      "outputs": ["audit_plan.json", "gap_tracker.md", "quality_report.json", "compliance_report.json", "project_dashboard.md"],
      "capabilities": [
        "Task decomposition and delegation",
        "Progress tracking",
        "Report aggregation",
        "Pattern identification across sub-task results"
      ],
      "prompt_template": "You are the QA Auditor orchestrator for the North Africa TO&E project.\n\n**YOUR ROLE**: Break down quality assurance into specialized sub-tasks, delegate to workers, and aggregate results.\n\n**PROJECT CONTEXT**:\n- Project directory: {project_directory}\n- Total units planned: 213\n- Completed units: {completed_count}\n- Schema: unified_toe_schema.json v1.0.0\n- Template: MDBOOK_CHAPTER_TEMPLATE.md v2.0\n\n**AUDIT WORKFLOW** (Orchestrator-Workers Pattern):\n\nSTEP 1: **SCAN & INVENTORY**\n- Scan `{project_directory}/units/` for JSON files\n- Scan `{project_directory}/north_africa_book/src/` for chapter files\n- Create inventory:\n  ```json\n  {\n    \"units_found\": 18,\n    \"chapters_found\": 18,\n    \"json_files\": [\"britain_1940q2_7th_armoured_division_toe.json\", ...],\n    \"chapter_files\": [\"chapter_7th_armoured.md\", ...]\n  }\n  ```\n\nSTEP 2: **DELEGATE TO SPECIALIZED WORKERS**\n\nYou will coordinate 5 specialized sub-tasks:\n\na) **gap_analyzer**\n   - Task: Extract `validation.known_gaps` from each JSON file\n   - Input: List of JSON files\n   - Output: Structured gap data per unit\n   - Tool: Read JSON, extract gaps, categorize by severity\n\nb) **template_checker**\n   - Task: Validate each MDBook chapter against template standard\n   - Input: Chapter file + template requirements\n   - Output: Compliance score + violations list\n   - Tool: Read chapter, check sections/format\n\nc) **cross_validator**\n   - Task: Compare JSON data vs MDBook chapter for consistency\n   - Input: JSON + corresponding chapter\n   - Output: Discrepancy report\n   - Tool: Read both, compare key fields\n\nd) **metrics_calculator**\n   - Task: Calculate completion and quality metrics\n   - Input: All unit data + gap analysis results\n   - Output: Statistics and scores\n   - Tool: Aggregate data, compute percentages\n\ne) **report_generator**\n   - Task: Generate final QA reports from aggregated results\n   - Input: Results from workers a-d\n   - Output: 4 report files (GAP_TRACKER.md, QUALITY_REPORT.json, etc.)\n   - Tool: Format and write reports\n\nSTEP 3: **ORCHESTRATION PLAN**\n\nCreate execution plan:\n```json\n{\n  \"execution_order\": [\n    {\"task\": \"gap_analyzer\", \"parallel\": false, \"inputs\": \"all_json_files\"},\n    {\"task\": \"template_checker\", \"parallel\": true, \"inputs\": \"all_chapter_files\"},\n    {\"task\": \"cross_validator\", \"parallel\": true, \"inputs\": \"json_chapter_pairs\"},\n    {\"task\": \"metrics_calculator\", \"parallel\": false, \"inputs\": \"gap_results + compliance_results\"},\n    {\"task\": \"report_generator\", \"parallel\": false, \"inputs\": \"all_worker_results\"}\n  ],\n  \"estimated_time\": \"5-10 minutes\",\n  \"parallelizable_steps\": [\"template_checker\", \"cross_validator\"]\n}\n```\n\nSTEP 4: **EXECUTE & MONITOR**\n\nFor each sub-task:\n1. Provide clear, minimal inputs\n2. Execute worker task\n3. Validate worker output format\n4. Handle errors gracefully (log and continue)\n5. Aggregate successful results\n\nSTEP 5: **AGGREGATE & REPORT**\n\nGenerate final outputs:\n1. **GAP_TRACKER.md** - All gaps across all units with priorities\n2. **QUALITY_REPORT.json** - Quantitative metrics (completion %, confidence scores)\n3. **COMPLIANCE_REPORT.json** - Template adherence by chapter\n4. **PROJECT_DASHBOARD.md** - Executive summary with recommendations\n\n**QUALITY STANDARDS**:\n- Minimum confidence per unit: 75%\n- Maximum critical gaps per unit: 0\n- Template compliance target: 100%\n- JSON-Chapter consistency target: 100%\n\n**ERROR HANDLING**:\n- If JSON file unreadable: Log error, mark unit as \"needs_review\", continue\n- If chapter missing: Note in compliance report, continue\n- If validation fails: Document specific failure, suggest corrective action\n\n**OUTPUT REQUIREMENTS**:\n- All reports must be actionable (specific files, line numbers, corrective actions)\n- Gap severity must use consistent classification (critical/important/moderate/low)\n- Metrics must be verifiable (show calculation method)\n- Recommendations must be prioritized by impact\n\n**START ORCHESTRATION**: Begin with Step 1 (Scan & Inventory) and create the execution plan.",
      "validation_rules": [
        "Orchestration plan created before execution",
        "Each sub-task has clear inputs/outputs",
        "Error handling specified for each step",
        "Final reports are comprehensive and actionable"
      ],
      "sub_tasks": {
        "gap_analyzer": {
          "role": "Extract and categorize data gaps from unit JSON files",
          "inputs": ["json_file_list"],
          "outputs": ["gap_data.json"],
          "prompt": "Extract `validation.known_gaps` from each JSON file: {json_files}\n\nFor each gap, classify:\n- Severity: critical|important|moderate|low\n- Category: commanders|equipment_variants|subordinate_units|personnel|supply_status|witw_ids\n\nOutput format:\n```json\n[\n  {\n    \"unit\": \"7th Armoured Division\",\n    \"nation\": \"britain\",\n    \"quarter\": \"1940-Q2\",\n    \"confidence\": 85,\n    \"gaps\": [\n      {\"gap\": \"7th Armoured Brigade commander name not confirmed\", \"severity\": \"important\", \"category\": \"commanders\"},\n      {\"gap\": \"Exact A9 vs A10 distribution\", \"severity\": \"moderate\", \"category\": \"equipment_variants\"}\n    ]\n  }\n]\n```"
        },
        "template_checker": {
          "role": "Validate MDBook chapter against template standard",
          "inputs": ["chapter_file", "template_requirements"],
          "outputs": ["compliance_score.json"],
          "prompt": "Check chapter {chapter_file} against template requirements:\n\nRequired sections: {required_sections}\nEquipment format rules: {equipment_rules}\n\nVerify:\n1. All required sections present\n2. Equipment tables use **bold** categories, ↳ variant sub-items\n3. EVERY variant has detail section\n4. Armored cars separate from transport\n5. No tanks/armored cars in transport table\n\nOutput:\n```json\n{\n  \"chapter\": \"chapter_7th_armoured.md\",\n  \"compliance_score\": 95,\n  \"missing_sections\": [],\n  \"format_violations\": [\"Missing detail section for Bedford MW\"],\n  \"recommendations\": [\"Add detail section for Bedford MW after table\"]\n}\n```"
        },
        "cross_validator": {
          "role": "Verify JSON and MDBook chapter consistency",
          "inputs": ["json_file", "chapter_file"],
          "outputs": ["discrepancies.json"],
          "prompt": "Compare {json_file} with {chapter_file}.\n\nCheck:\n1. Tank totals match\n2. Artillery totals match\n3. All JSON variants appear in chapter\n4. Personnel totals match\n5. Commander names match\n6. Confidence scores match\n\nOutput discrepancies ONLY:\n```json\n{\n  \"unit\": \"7th Armoured Division\",\n  \"discrepancies\": [\n    {\"field\": \"tanks.medium.A13_Mk_II\", \"json\": 44, \"chapter\": 42, \"severity\": \"major\"}\n  ]\n}\n```\n\nIf no discrepancies: `{\"unit\": \"...\", \"discrepancies\": []}`"
        },
        "metrics_calculator": {
          "role": "Calculate project-level quality metrics",
          "inputs": ["gap_data.json", "compliance_scores.json"],
          "outputs": ["metrics.json"],
          "prompt": "Calculate metrics from gap data: {gap_data} and compliance scores: {compliance_scores}\n\nCompute:\n1. Completion: units completed / 213\n2. Avg confidence score\n3. Units below 80% confidence\n4. Gaps by category counts\n5. Compliance score distribution\n\nOutput:\n```json\n{\n  \"completion\": {\"completed\": 18, \"total\": 213, \"percent\": 8.5},\n  \"confidence\": {\"average\": 85, \"below_threshold\": 3},\n  \"gaps\": {\"critical\": 0, \"important\": 65, \"moderate\": 25, \"low\": 250},\n  \"compliance\": {\"100_percent\": 12, \"95_99_percent\": 5, \"below_95\": 1}\n}\n```"
        },
        "report_generator": {
          "role": "Generate final QA reports from aggregated results",
          "inputs": ["gap_data.json", "compliance_scores.json", "discrepancies.json", "metrics.json"],
          "outputs": ["GAP_TRACKER.md", "QUALITY_REPORT.json", "COMPLIANCE_REPORT.json", "PROJECT_DASHBOARD.md"],
          "prompt": "Generate 4 QA reports from results:\n\nInputs:\n- Gap data: {gap_data}\n- Compliance: {compliance_scores}\n- Discrepancies: {discrepancies}\n- Metrics: {metrics}\n\nCreate:\n1. **GAP_TRACKER.md**: All gaps with priorities, patterns, research recommendations\n2. **QUALITY_REPORT.json**: Quantitative metrics, confidence distribution, completion stats\n3. **COMPLIANCE_REPORT.json**: Per-chapter scores, violations, corrective actions\n4. **PROJECT_DASHBOARD.md**: Executive summary, health status, critical issues, next priorities\n\nEnsure reports are:\n- Actionable (specific files/lines)\n- Prioritized (critical first)\n- Evidence-based (show data sources)\n- Forward-looking (recommendations)"
        }
      }
    },

    {
      "agent_id": "witw_equipment_mapper",
      "category": "data_integration",
      "role": "Orchestrator for WITW equipment mapping - coordinates specialized sub-tasks for high-confidence mappings",
      "workflow_pattern": "orchestrator-workers",
      "inputs": ["equipment_list.json", "witw_database", "canonical_equipment_master.json", "nation", "quarter"],
      "outputs": ["equipment_witw_mappings.json", "canonical_equipment.json", "custom_ids.json", "mapping_quality_report.json"],
      "capabilities": [
        "Task decomposition and delegation",
        "Multi-stage confidence scoring",
        "Cross-nation deduplication",
        "Custom ID assignment",
        "Historical validation"
      ],
      "prompt_template": "You are the WITW Equipment Mapper orchestrator for mapping equipment names to War in the West game database IDs.\n\n**YOUR ROLE**: Break down equipment mapping into specialized sub-tasks, delegate to workers, and aggregate high-confidence results.\n\n**PROJECT CONTEXT**:\n- Equipment list: {equipment_list}\n- WITW database: {witw_database_path}\n- Nation: {nation}\n- Quarter: {quarter}\n- Iteration #2 baseline: 22.8% success rate (107/469 mapped)\n- Target: 70%+ high-confidence mappings (≥90%)\n\n**CRITICAL REQUIREMENTS**:\n1. **Higher confidence ratings** - Achieve 70%+ high-confidence (≥90%) mappings\n2. **Zero duplicates** - Prevent duplicate entries for same vehicle with name variants\n3. **Cross-nation awareness** - Handle equipment used by multiple nations (M4 Sherman, Universal Carrier)\n4. **Historical validation** - Verify equipment dates, nation usage, role\n\n**MAPPING WORKFLOW** (Orchestrator-Workers Pattern):\n\nSTEP 1: **SCAN & INVENTORY**\n- Load equipment list from unit JSONs: {equipment_list}\n- Load WITW database: {witw_database_path}\n- Load iteration #2 results: {iteration2_mappings}\n- Create inventory:\n  ```json\n  {\n    \"total_equipment\": 469,\n    \"unique_names\": 450,\n    \"nations\": [\"german\", \"british\", \"italian\", \"american\", \"french\"],\n    \"categories\": [\"tanks\", \"artillery\", \"vehicles\", \"aircraft\", \"weapons\"]\n  }\n  ```\n\nSTEP 2: **DELEGATE TO SPECIALIZED WORKERS**\n\nYou will coordinate 5 specialized sub-tasks:\n\na) **name_normalizer**\n   - Task: Normalize all equipment names to canonical form\n   - Input: Raw equipment names from JSONs\n   - Output: Normalized names with variants mapped\n   - Tool: Strip special chars, expand abbreviations, handle suffixes\n\nb) **fuzzy_matcher**\n   - Task: Multi-stage fuzzy matching against WITW database\n   - Input: Normalized names + WITW database\n   - Output: Candidate matches with confidence scores\n   - Tool: Token matching, Levenshtein distance, caliber awareness\n\nc) **cross_nation_deduplicator**\n   - Task: Identify same equipment used by multiple nations\n   - Input: All equipment entries across nations\n   - Output: Canonical equipment with nation variant mappings\n   - Tool: Cross-reference, role matching, specification comparison\n\nd) **custom_id_generator**\n   - Task: Assign custom IDs to unmapped equipment\n   - Input: Equipment without WITW matches\n   - Output: Custom IDs (100000+ range) with specifications\n   - Tool: ID allocation, category-based prefixes\n\ne) **mapping_validator**\n   - Task: Validate all mappings against historical context\n   - Input: All mapping candidates\n   - Output: Final validated mappings with confidence scores\n   - Tool: Date checking, nation verification, role validation\n\nSTEP 3: **ORCHESTRATION PLAN**\n\nCreate execution plan:\n```json\n{\n  \"execution_order\": [\n    {\"task\": \"name_normalizer\", \"parallel\": false, \"inputs\": \"all_equipment_names\"},\n    {\"task\": \"fuzzy_matcher\", \"parallel\": true, \"inputs\": \"normalized_names_by_category\"},\n    {\"task\": \"cross_nation_deduplicator\", \"parallel\": false, \"inputs\": \"all_match_candidates\"},\n    {\"task\": \"custom_id_generator\", \"parallel\": false, \"inputs\": \"unmapped_equipment\"},\n    {\"task\": \"mapping_validator\", \"parallel\": false, \"inputs\": \"all_mappings\"}\n  ],\n  \"estimated_time\": \"10-15 minutes\",\n  \"parallelizable_steps\": [\"fuzzy_matcher\"]\n}\n```\n\nSTEP 4: **EXECUTE & MONITOR**\n\nFor each sub-task:\n1. Provide clear, minimal inputs\n2. Execute worker task\n3. Validate worker output format\n4. Handle errors gracefully (log and flag for manual review)\n5. Aggregate successful results\n6. Track confidence distribution\n\nSTEP 5: **AGGREGATE & REPORT**\n\nGenerate final outputs:\n1. **equipment_witw_mappings.json** - All equipment with WITW IDs and confidence scores\n2. **canonical_equipment.json** - Canonical entries with all name variants\n3. **custom_ids.json** - Custom IDs for equipment not in WITW database\n4. **mapping_quality_report.json** - Metrics, confidence distribution, manual review queue\n\n**CONFIDENCE SCORING SYSTEM**:\n- **100%** - Exact match (name + caliber + variant)\n- **95-99%** - Name + caliber match with minor variant differences\n- **90-94%** - High fuzzy match (>85% similarity) + caliber/role match\n- **75-89%** - Medium fuzzy match + partial context match\n- **<75%** - Low confidence → FLAG FOR MANUAL REVIEW\n- **No match** - Assign custom ID (100000+ range)\n\n**DEDUPLICATION RULES**:\n1. Create canonical equipment entry (e.g., \"Sherman M4\")\n2. Map all variants to canonical:\n   - \"M4 Sherman\" → \"Sherman M4\" (canonical)\n   - \"Sherman I (M4)\" → \"Sherman M4\" (canonical)\n   - \"Sherman M4A1\" → separate canonical (different variant)\n3. Track nation-specific names:\n   - USA: \"M4 Sherman\"\n   - Britain: \"Sherman I\" or \"Sherman Mk I\"\n   - France: \"M4 Sherman\" (Lend-Lease)\n4. Single WITW ID per canonical equipment\n5. Cross-reference table for nation-specific names\n\n**ERROR HANDLING**:\n- If normalization fails: Log error, use raw name, flag for review\n- If no WITW match found: Assign custom ID, document specifications\n- If multiple high-confidence matches: Flag for manual disambiguation\n- If validation fails: Document specific failure, reduce confidence score\n\n**QUALITY STANDARDS**:\n- Minimum 70% high-confidence mappings (≥90%)\n- Maximum 20% manual review queue\n- Zero false positives (wrong equipment matched)\n- Zero duplicates (same equipment multiple entries)\n- All 241 unmapped items get custom IDs\n\n**OUTPUT REQUIREMENTS**:\n- All mappings must include: canonical_name, witw_id (or custom_id), confidence, nation_variants, mapping_source\n- Manual review queue must show: equipment_name, best_match_candidate, confidence, reason_for_review\n- Custom IDs must include: custom_id, witw_equivalent, specifications, estimated_quantity\n- Quality report must show: total_mapped, confidence_distribution, false_positive_check, duplication_check\n\n**START ORCHESTRATION**: Begin with Step 1 (Scan & Inventory) and create the execution plan.",
      "validation_rules": [
        "Orchestration plan created before execution",
        "Each sub-task has clear inputs/outputs",
        "Confidence scores follow defined system (100% → 0%)",
        "Deduplication applied to all equipment",
        "All unmapped items receive custom IDs",
        "Final mappings validated against historical context",
        "Quality report includes metrics and distribution"
      ],
      "sub_tasks": {
        "name_normalizer": {
          "role": "Normalize equipment names to canonical form, handle variants",
          "inputs": ["raw_equipment_names"],
          "outputs": ["normalized_names.json", "variant_mappings.json"],
          "prompt": "Normalize equipment names from raw input: {raw_equipment_names}\n\n**NORMALIZATION RULES**:\n\n1. **Strip special characters**:\n   - Replace underscores with spaces: \"Panzer_III_H\" → \"Panzer III H\"\n   - Remove trailing/leading spaces\n   - Normalize multiple spaces to single space\n\n2. **Expand abbreviations**:\n   - GMC → Gun Motor Carriage\n   - Mk → Mark\n   - Ausf → Ausführung (but keep as \"Ausf\" for German)\n   - Mod → Modello (Italian), Modèle (French)\n   - AT → Anti-Tank\n   - AA → Anti-Aircraft\n\n3. **Handle variant suffixes**:\n   - Capture Ausf/Mk/Serie/Mod/M designations\n   - Example: \"Panzer III Ausf H\" → base: \"Panzer III\", variant: \"Ausf H\"\n   - Example: \"Sherman M4A1\" → base: \"Sherman M4\", variant: \"A1\"\n\n4. **Standardize nation prefixes**:\n   - Remove \"german_\", \"british_\", \"italian_\" prefixes\n   - Store nation separately\n\n5. **Caliber extraction**:\n   - Extract caliber from name: \"75mm M1897\" → caliber: 75mm, base: \"M1897\"\n   - Normalize formats: \"7.5cm\" → \"75mm\", \"3.7-inch\" → \"94mm\"\n\n6. **Create canonical form**:\n   - Format: \"[Base Name] [Variant] [Caliber]\"\n   - Example: \"Panzer III Ausf H\" (canonical)\n   - Example: \"Sherman M4\" (canonical), \"Sherman M4A1\" (separate canonical)\n\n**OUTPUT FORMAT**:\n```json\n{\n  \"normalized_equipment\": [\n    {\n      \"raw_name\": \"Panzer_III_H\",\n      \"canonical_name\": \"Panzer III Ausf H\",\n      \"base_name\": \"Panzer III\",\n      \"variant\": \"Ausf H\",\n      \"nation\": \"german\",\n      \"category\": \"tank\",\n      \"caliber\": null,\n      \"alternate_names\": [\"Panzer IIIh\", \"Pz.Kpfw. III Ausf. H\"]\n    },\n    {\n      \"raw_name\": \"M3_GMC\",\n      \"canonical_name\": \"M3 75mm Gun Motor Carriage\",\n      \"base_name\": \"M3 GMC\",\n      \"variant\": null,\n      \"nation\": \"american\",\n      \"category\": \"tank_destroyer\",\n      \"caliber\": \"75mm\",\n      \"alternate_names\": [\"M3 75mm GMC\", \"75mm GMC M3\"]\n    },\n    {\n      \"raw_name\": \"Sherman M4\",\n      \"canonical_name\": \"Sherman M4\",\n      \"base_name\": \"Sherman\",\n      \"variant\": \"M4\",\n      \"nation\": \"american\",\n      \"category\": \"tank\",\n      \"caliber\": \"75mm\",\n      \"alternate_names\": [\"M4 Sherman\", \"Sherman I\", \"Sherman Mk I\"]\n    }\n  ]\n}\n```\n\n**HANDLE EDGE CASES**:\n- Multiple calibers in name: Prioritize main armament\n- Ambiguous variants: Flag for disambiguation\n- Generic names (\"Field\", \"Transport\"): Flag for manual review\n- Special characters (ü, é, etc.): Preserve but provide ASCII alternatives"
        },
        "fuzzy_matcher": {
          "role": "Multi-stage fuzzy matching against WITW database with confidence scoring",
          "inputs": ["normalized_names.json", "witw_database"],
          "outputs": ["match_candidates.json"],
          "prompt": "Perform multi-stage fuzzy matching for equipment: {normalized_names}\n\nWITW Database: {witw_database}\n\n**MATCHING STAGES**:\n\n**Stage 1: Exact Match (100% confidence)**\n- Compare canonical_name with WITW name (case-insensitive)\n- Include alternate_names comparison\n- If exact match found → confidence: 100%\n\n**Stage 2: Name + Caliber Match (95-99% confidence)**\n- Match base_name + caliber\n- Allow minor variant differences (Ausf H vs Ausf h)\n- Example: \"Panzer III Ausf H\" + \"50mm\" matches \"Panzer IIIh 50mm\"\n- Confidence: 95-99% based on variant similarity\n\n**Stage 3: High Fuzzy Match (90-94% confidence)**\n- Token-based matching (split on spaces)\n- Weight tokens by importance:\n  - Base name: 40%\n  - Caliber: 30%\n  - Variant: 20%\n  - Nation: 10%\n- Levenshtein distance for token similarity\n- Example: \"Panzer III\" matches \"Panzer IIIh\" (high similarity)\n- Confidence: 90-94% if >85% token match + caliber/role match\n\n**Stage 4: Medium Fuzzy Match (75-89% confidence)**\n- Lower token match threshold (70-85%)\n- Partial caliber match (e.g., 75mm vs 76mm)\n- Role-based filtering (tank matches tank, not armored car)\n- Confidence: 75-89% based on similarity score\n\n**Stage 5: Low Confidence (<75%)**\n- Matches below 75% similarity\n- FLAG FOR MANUAL REVIEW\n- Provide best candidate but mark as uncertain\n\n**Stage 6: No Match**\n- No candidates above 50% similarity\n- Mark for custom ID assignment\n\n**SCORING ENHANCEMENTS**:\n\n1. **Caliber boost**:\n   - If caliber exact match: +15% confidence\n   - If caliber close match (±5mm): +10% confidence\n\n2. **Role verification**:\n   - Verify equipment role matches (tank, artillery, vehicle)\n   - If role mismatch: -30% confidence (prevent false positives)\n   - Example: \"BSA M20\" (motorcycle) should NOT match \"BT-42\" (tank)\n\n3. **Nation consistency**:\n   - Verify equipment was used by nation in quarter\n   - If nation mismatch: -20% confidence\n   - Exception: Captured/Lend-Lease equipment\n\n4. **Variant suffix handling**:\n   - Ausf/Mk/Serie/Mod suffixes should match closely\n   - \"Ausf H\" vs \"Ausf G\" = different variants (confidence penalty)\n   - \"Ausf H\" vs \"Ausf h\" = same variant (no penalty)\n\n**OUTPUT FORMAT**:\n```json\n{\n  \"match_candidates\": [\n    {\n      \"canonical_name\": \"Panzer III Ausf H\",\n      \"witw_match\": {\n        \"witw_id\": 187,\n        \"witw_name\": \"Panzer IIIh\",\n        \"confidence\": 98,\n        \"stage\": \"name_caliber_match\",\n        \"match_factors\": {\n          \"name_similarity\": 95,\n          \"caliber_match\": \"exact\",\n          \"variant_match\": \"close\",\n          \"role_match\": true,\n          \"nation_verified\": true\n        }\n      },\n      \"alternate_candidates\": []\n    },\n    {\n      \"canonical_name\": \"BSA M20\",\n      \"witw_match\": null,\n      \"confidence\": 0,\n      \"stage\": \"no_match\",\n      \"reason\": \"No WITW entry for motorcycles, requires custom ID\"\n    },\n    {\n      \"canonical_name\": \"M3 75mm Gun Motor Carriage\",\n      \"witw_match\": {\n        \"witw_id\": 2126,\n        \"witw_name\": \"M3 75mm GMC\",\n        \"confidence\": 100,\n        \"stage\": \"exact_match\"\n      }\n    }\n  ],\n  \"summary\": {\n    \"exact_matches\": 120,\n    \"high_confidence\": 180,\n    \"medium_confidence\": 90,\n    \"low_confidence\": 40,\n    \"no_match\": 39\n  }\n}\n```\n\n**VALIDATION CHECKS**:\n- Prevent obvious false positives (role mismatch)\n- Flag ambiguous matches (multiple high-confidence candidates)\n- Document matching logic for each candidate"
        },
        "cross_nation_deduplicator": {
          "role": "Identify and deduplicate equipment used by multiple nations",
          "inputs": ["match_candidates.json", "all_nation_equipment"],
          "outputs": ["canonical_equipment.json", "deduplication_report.json"],
          "prompt": "Deduplicate equipment across nations: {match_candidates}\n\nAll equipment by nation: {all_nation_equipment}\n\n**DEDUPLICATION WORKFLOW**:\n\n**Step 1: Identify Cross-Nation Equipment**\n\nCommon equipment used by multiple nations:\n- **M4 Sherman**: USA (M4 Sherman), Britain (Sherman I/Mk I), France (M4 Sherman Lend-Lease)\n- **M3 Stuart**: USA (M3 Stuart), Britain (Stuart I/Honey), France (M3 Stuart)\n- **Universal Carrier**: Britain, Canada, Australia, New Zealand, India, South Africa\n- **Valentine**: Britain, Canada, Soviet Union (Lend-Lease)\n- **Crusader**: Britain, Australia, New Zealand, South Africa\n- **Matilda**: Britain, Australia\n- **QF 25-pounder**: Britain, Canada, Australia, New Zealand, India, South Africa\n- **Bofors 40mm**: Used by ALL nations\n- **Captured equipment**: Italian M13/40 used by British, German Panzer III used by Italians\n\n**Step 2: Create Canonical Equipment Entries**\n\nFor each unique piece of equipment:\n```json\n{\n  \"canonical_id\": \"CANON_M4_SHERMAN\",\n  \"canonical_name\": \"Sherman M4\",\n  \"base_type\": \"Medium Tank\",\n  \"primary_nation\": \"american\",\n  \"witw_id\": 2025,\n  \"specifications\": {\n    \"main_armament\": \"75mm M3 Gun\",\n    \"armor_front\": \"51mm\",\n    \"crew\": 5,\n    \"weight\": \"30.3 tons\"\n  },\n  \"nation_variants\": [\n    {\n      \"nation\": \"american\",\n      \"local_name\": \"M4 Sherman\",\n      \"alternate_names\": [\"Sherman M4\", \"Medium Tank M4\"]\n    },\n    {\n      \"nation\": \"british\",\n      \"local_name\": \"Sherman I\",\n      \"alternate_names\": [\"Sherman Mk I\", \"Sherman I (M4)\"]\n    },\n    {\n      \"nation\": \"french\",\n      \"local_name\": \"M4 Sherman\",\n      \"note\": \"Lend-Lease from USA, 1943 onwards\"\n    }\n  ],\n  \"deduplication_rule\": \"Same base variant M4 with 75mm gun, multiple nation designations\"\n}\n```\n\n**Step 3: Handle Variant Differences**\n\n- **M4 vs M4A1**: Different canonical entries (hull design difference)\n- **M4A1 vs M4A1 (76)**: Different canonical entries (gun difference)\n- **Sherman I vs Sherman II**: Map to M4 vs M4A1 respectively\n- **Sherman V**: Maps to M4A4 (different engine)\n\n**Step 4: Create Deduplication Mappings**\n\n```json\n{\n  \"deduplication_mappings\": [\n    {\n      \"canonical_id\": \"CANON_M4_SHERMAN\",\n      \"duplicate_entries\": [\n        {\"nation\": \"american\", \"name\": \"M4 Sherman\"},\n        {\"nation\": \"american\", \"name\": \"Sherman M4\"},\n        {\"nation\": \"british\", \"name\": \"Sherman I\"},\n        {\"nation\": \"british\", \"name\": \"Sherman Mk I\"},\n        {\"nation\": \"british\", \"name\": \"Sherman I (M4)\"}\n      ],\n      \"witw_id\": 2025,\n      \"action\": \"merge_to_canonical\"\n    },\n    {\n      \"canonical_id\": \"CANON_UNIVERSAL_CARRIER\",\n      \"duplicate_entries\": [\n        {\"nation\": \"british\", \"name\": \"Universal Carrier\"},\n        {\"nation\": \"british\", \"name\": \"Bren Carrier\"},\n        {\"nation\": \"british\", \"name\": \"Bren Mortar Carrier\"},\n        {\"nation\": \"canadian\", \"name\": \"Universal Carrier\"},\n        {\"nation\": \"australian\", \"name\": \"Universal Carrier\"}\n      ],\n      \"witw_id\": 2117,\n      \"action\": \"merge_to_canonical\",\n      \"note\": \"Carrier variants (Bren, Mortar) are modifications of base Universal Carrier\"\n    }\n  ]\n}\n```\n\n**Step 5: Handle Captured/Lend-Lease Equipment**\n\n```json\n{\n  \"canonical_id\": \"CANON_PANZER_III_AUSF_H\",\n  \"primary_nation\": \"german\",\n  \"witw_id\": 187,\n  \"captured_by\": [\n    {\n      \"nation\": \"italian\",\n      \"local_name\": \"Panzer III (German)\",\n      \"period\": \"1943\",\n      \"note\": \"Post-Italian armistice, used by RSI forces\"\n    },\n    {\n      \"nation\": \"british\",\n      \"local_name\": \"Captured Panzer III\",\n      \"period\": \"1940-1943\",\n      \"note\": \"Limited use of captured vehicles for evaluation\"\n    }\n  ]\n}\n```\n\n**OUTPUT FORMAT**:\n```json\n{\n  \"canonical_equipment\": [\n    {\n      \"canonical_id\": \"CANON_M4_SHERMAN\",\n      \"canonical_name\": \"Sherman M4\",\n      \"witw_id\": 2025,\n      \"nation_variants\": [...],\n      \"total_duplicate_entries\": 5\n    }\n  ],\n  \"deduplication_summary\": {\n    \"total_canonical_entries\": 350,\n    \"total_raw_entries\": 469,\n    \"duplicates_removed\": 119,\n    \"cross_nation_equipment\": 45\n  }\n}\n```\n\n**VALIDATION RULES**:\n- Verify all nation variants map to same WITW ID\n- Flag if specifications differ significantly (different actual equipment)\n- Handle variant suffixes carefully (M4 ≠ M4A1)\n- Document all deduplication decisions"
        },
        "custom_id_generator": {
          "role": "Assign custom IDs to equipment not in WITW database",
          "inputs": ["unmapped_equipment"],
          "outputs": ["custom_ids.json"],
          "prompt": "Generate custom IDs for unmapped equipment: {unmapped_equipment}\n\n**CUSTOM ID SYSTEM**:\n\n**ID Range: 100000-199999** (avoids conflict with WITW IDs)\n\n**Category Prefixes**:\n- **100000-109999**: Tanks and armored fighting vehicles\n- **110000-119999**: Artillery (field, anti-tank, anti-aircraft)\n- **120000-129999**: Trucks and transport vehicles\n- **130000-139999**: Motorcycles and light vehicles\n- **140000-149999**: Halftracks and APCs\n- **150000-159999**: Specialized vehicles (recovery, workshop, command)\n- **160000-169999**: Aircraft (not in WITW)\n- **170000-179999**: Small arms and infantry weapons\n- **180000-189999**: Miscellaneous equipment\n\n**ID ASSIGNMENT ALGORITHM**:\n\n1. **Determine category** from equipment type\n2. **Check existing custom IDs** to avoid duplicates\n3. **Assign sequential ID** within category range\n4. **Document WITW equivalent** (closest match in game)\n5. **Record specifications** for future reference\n\n**OUTPUT FORMAT**:\n```json\n{\n  \"custom_equipment\": [\n    {\n      \"canonical_name\": \"FIAT 626 NLM\",\n      \"custom_id\": 120001,\n      \"category\": \"truck\",\n      \"nation\": \"italian\",\n      \"witw_equivalent\": \"Medium Truck\",\n      \"specifications\": {\n        \"payload\": \"3.32 tonnes\",\n        \"engine\": \"FIAT Tipo 326 65hp\",\n        \"max_speed\": \"64 km/h\",\n        \"crew\": 2\n      },\n      \"historical_context\": {\n        \"service_period\": \"1939-1943\",\n        \"production_total\": \"15000-20000\",\n        \"primary_use\": \"General cargo transport, North Africa\"\n      },\n      \"reason_not_in_witw\": \"Theater-specific variant not modeled in WITW\"\n    },\n    {\n      \"canonical_name\": \"BSA M20\",\n      \"custom_id\": 130001,\n      \"category\": \"motorcycle\",\n      \"nation\": \"british\",\n      \"witw_equivalent\": \"Reconnaissance Squad (abstracted)\",\n      \"specifications\": {\n        \"engine\": \"500cc single-cylinder\",\n        \"max_speed\": \"100 km/h\",\n        \"crew\": 1,\n        \"role\": \"Dispatch rider, reconnaissance\"\n      },\n      \"historical_context\": {\n        \"service_period\": \"1937-1955\",\n        \"production_total\": \"126000+\",\n        \"primary_use\": \"Military police, dispatch, reconnaissance\"\n      },\n      \"reason_not_in_witw\": \"WITW does not model individual motorcycles\"\n    },\n    {\n      \"canonical_name\": \"SdKfz 251\",\n      \"custom_id\": 140001,\n      \"category\": \"halftrack\",\n      \"nation\": \"german\",\n      \"witw_id_exists\": 100001,\n      \"note\": \"Already has fuzzy-matched custom ID from iteration #2, preserved\"\n    },\n    {\n      \"canonical_name\": \"M31 Tank Recovery Vehicle\",\n      \"custom_id\": 150001,\n      \"category\": \"recovery_vehicle\",\n      \"nation\": \"american\",\n      \"witw_equivalent\": \"Recovery Vehicle (abstracted)\",\n      \"specifications\": {\n        \"base_chassis\": \"M3 Lee/Grant\",\n        \"winch_capacity\": \"30 tons\",\n        \"crew\": 4,\n        \"armament\": \"None (turret removed)\"\n      },\n      \"historical_context\": {\n        \"service_period\": \"1942-1945\",\n        \"production_total\": \"~300\",\n        \"primary_use\": \"Tank recovery in field conditions\"\n      },\n      \"reason_not_in_witw\": \"Support vehicles abstracted in WITW logistics system\"\n    }\n  ],\n  \"summary\": {\n    \"total_custom_ids\": 241,\n    \"by_category\": {\n      \"trucks\": 90,\n      \"aircraft\": 45,\n      \"motorcycles\": 20,\n      \"specialized_vehicles\": 30,\n      \"artillery\": 25,\n      \"tanks\": 15,\n      \"misc\": 16\n    },\n    \"next_available_id\": 189999\n  }\n}\n```\n\n**PRESERVATION RULES**:\n- **DO NOT reassign custom IDs from iteration #2** if they already exist (100001-100008)\n- Preserve: SdKfz 251 (100001), SdKfz 250 (100002), SdKfz 7 (100003), SdKfz 11 (100004), SdKfz 9 (100005), BMW R75 (100006), Zündapp KS750 (100007), Opel Blitz (100008)\n- Start new assignments at 100009 for category 100000-109999\n\n**DOCUMENTATION REQUIREMENTS**:\n- Every custom ID must have: canonical_name, custom_id, category, nation, witw_equivalent, reason_not_in_witw\n- Optional but recommended: specifications, historical_context, estimated_quantity\n- Cross-reference table: custom_id → WITW equivalent for scenario export"
        },
        "mapping_validator": {
          "role": "Validate all mappings against historical context and quality standards",
          "inputs": ["equipment_witw_mappings.json", "canonical_equipment.json", "custom_ids.json"],
          "outputs": ["validated_mappings.json", "validation_report.json"],
          "prompt": "Validate equipment mappings: {equipment_witw_mappings}\n\nCanonical equipment: {canonical_equipment}\nCustom IDs: {custom_ids}\n\n**VALIDATION WORKFLOW**:\n\n**Step 1: Historical Accuracy Checks**\n\nFor each mapped equipment:\n1. **Date verification**:\n   - Check equipment introduction date vs quarter\n   - Example: Tiger I (1942) should not appear in 1940-Q2\n   - Flag anachronisms with severity: CRITICAL (>2 years), WARNING (<2 years)\n\n2. **Nation verification**:\n   - Verify equipment was used by specified nation\n   - Check for: Indigenous production, Lend-Lease, Captured equipment\n   - Example: M4 Sherman in British service (1942+) = valid\n   - Example: M4 Sherman in German service = flag as captured (verify context)\n\n3. **Role verification**:\n   - Verify equipment role matches category\n   - Example: \"BSA M20\" (motorcycle) matched to \"BT-42\" (tank) = FALSE POSITIVE\n   - Check: tanks → tanks, artillery → artillery, transport → transport\n\n**Step 2: Confidence Validation**\n\nFor each mapping:\n1. **High confidence (≥90%)**: Verify match quality\n   - Exact or near-exact name match?\n   - Caliber/variant consistency?\n   - Historical context supports mapping?\n\n2. **Medium confidence (75-89%)**: Flag for review\n   - Document why confidence is not higher\n   - Provide alternate candidates if available\n   - Recommend manual verification\n\n3. **Low confidence (<75%)**: Mark for manual review\n   - Likely false positive or poor match\n   - Provide best candidate but recommend new research\n\n**Step 3: Deduplication Validation**\n\nFor canonical equipment:\n1. **Verify single WITW ID** per canonical entry\n2. **Check nation variants** map correctly\n3. **Validate specifications** are consistent across variants\n4. **Flag conflicts**:\n   - Example: \"Sherman I\" mapped to both witw_id 2025 (M4) and 2026 (M4A1)\n   - Resolve: Check if Sherman I = M4 only, or includes both variants\n\n**Step 4: Custom ID Validation**\n\nFor custom IDs:\n1. **Verify ID range** (100000-199999)\n2. **Check category prefix** matches equipment type\n3. **Validate no ID conflicts** with existing custom IDs\n4. **Ensure WITW equivalent** is documented\n5. **Check specifications** are complete\n\n**Step 5: Quality Metrics**\n\nCalculate and validate:\n1. **Mapping success rate**: High confidence / Total = ?\n   - Target: ≥70%\n   - Current baseline: 22.8%\n\n2. **False positive rate**: Historical validation failures / Total mapped\n   - Target: <1%\n\n3. **Duplication count**: Duplicate entries / Total canonical\n   - Target: 0\n\n4. **Manual review queue**: Medium + Low confidence / Total\n   - Target: <20%\n\n5. **Custom ID coverage**: Custom IDs assigned / Unmapped equipment\n   - Target: 100%\n\n**OUTPUT FORMAT**:\n```json\n{\n  \"validated_mappings\": [\n    {\n      \"canonical_name\": \"Panzer III Ausf H\",\n      \"witw_id\": 187,\n      \"confidence\": 98,\n      \"validation_status\": \"PASSED\",\n      \"checks\": {\n        \"date_check\": \"PASSED (1940-Q2, introduced 1940)\",\n        \"nation_check\": \"PASSED (German indigenous)\",\n        \"role_check\": \"PASSED (tank → tank)\",\n        \"confidence_check\": \"HIGH (≥90%)\",\n        \"deduplication_check\": \"PASSED (no duplicates)\"\n      }\n    },\n    {\n      \"canonical_name\": \"Tiger I\",\n      \"witw_id\": 97,\n      \"confidence\": 100,\n      \"validation_status\": \"WARNING\",\n      \"checks\": {\n        \"date_check\": \"WARNING (Appears in 1942-Q1, introduced 1942-Q3)\",\n        \"nation_check\": \"PASSED\",\n        \"role_check\": \"PASSED\",\n        \"confidence_check\": \"HIGH\",\n        \"deduplication_check\": \"PASSED\"\n      },\n      \"recommendation\": \"Verify Tiger I presence in 1942-Q1, likely too early\"\n    },\n    {\n      \"canonical_name\": \"BSA M20\",\n      \"witw_id\": null,\n      \"custom_id\": 130001,\n      \"confidence\": 100,\n      \"validation_status\": \"PASSED\",\n      \"checks\": {\n        \"custom_id_check\": \"PASSED (category: motorcycle, range: 130000-139999)\",\n        \"specification_check\": \"PASSED (complete)\",\n        \"witw_equivalent_check\": \"PASSED (documented)\"\n      }\n    }\n  ],\n  \"validation_report\": {\n    \"total_validated\": 469,\n    \"passed\": 445,\n    \"warnings\": 15,\n    \"failed\": 9,\n    \"quality_metrics\": {\n      \"high_confidence_rate\": 72.5,\n      \"false_positive_rate\": 0.4,\n      \"duplication_count\": 0,\n      \"manual_review_queue\": 18.0,\n      \"custom_id_coverage\": 100.0\n    },\n    \"target_comparison\": {\n      \"high_confidence_rate\": {\"target\": 70.0, \"actual\": 72.5, \"status\": \"EXCEEDED\"},\n      \"false_positive_rate\": {\"target\": 1.0, \"actual\": 0.4, \"status\": \"PASSED\"},\n      \"duplication_count\": {\"target\": 0, \"actual\": 0, \"status\": \"PASSED\"},\n      \"manual_review_queue\": {\"target\": 20.0, \"actual\": 18.0, \"status\": \"PASSED\"}\n    },\n    \"manual_review_items\": [\n      {\n        \"canonical_name\": \"Tiger I\",\n        \"issue\": \"Date anachronism (appears Q1 1942, introduced Q3 1942)\",\n        \"severity\": \"WARNING\",\n        \"recommended_action\": \"Verify historical records or adjust quarter\"\n      }\n    ]\n  }\n}\n```\n\n**QUALITY STANDARDS ENFORCEMENT**:\n- High confidence rate must meet or exceed 70% target\n- False positive rate must be below 1%\n- Zero duplicates tolerated\n- Manual review queue should be under 20%\n- All unmapped equipment must have custom IDs\n\n**FINAL VALIDATION**:\n- All mappings have confidence scores\n- All canonical equipment have single WITW ID or custom ID\n- All nation variants are documented\n- All validation checks are recorded\n- Quality metrics meet targets"
        }
      }
    }
  ],

  "orchestration_workflow": {
    "phases": [
      {
        "phase_id": 1,
        "name": "Source Extraction",
        "agents": ["document_parser", "historical_research"],
        "outputs": ["verified_facts.json", "conflicts.json"],
        "validation_required": true
      },
      {
        "phase_id": 2,
        "name": "Organization Building",
        "agents": ["org_hierarchy", "toe_template", "unit_instantiation"],
        "outputs": ["org_tree.json", "templates/", "all_units_toe/"],
        "validation_required": true
      },
      {
        "phase_id": 3,
        "name": "Equipment Distribution",
        "agents": ["theater_allocator", "division_cascader", "equipment_reconciliation"],
        "outputs": ["division_allocations.json", "all_units_with_equipment/"],
        "validation_required": true
      },
      {
        "phase_id": 4,
        "name": "Aggregation",
        "agents": ["bottom_up_aggregator", "top3_calculator"],
        "outputs": ["theater_scm.json", "aggregated_units/"],
        "validation_required": true
      },
      {
        "phase_id": 5,
        "name": "Validation",
        "agents": ["schema_validator", "historical_accuracy"],
        "outputs": ["validation_reports/", "accuracy_reports/"],
        "validation_required": false
      },
      {
        "phase_id": 6,
        "name": "Output Generation",
        "agents": ["book_chapter_generator", "scenario_exporter", "sql_populator"],
        "outputs": ["chapters/", "scenarios/", "database.sql"],
        "validation_required": false
      },
      {
        "phase_id": 7,
        "name": "Quality Assurance & Gap Analysis",
        "agents": ["qa_auditor"],
        "outputs": ["gap_tracker.md", "quality_report.json", "compliance_report.json", "project_dashboard.md"],
        "validation_required": true,
        "description": "Project-level QA audit checking all units for completeness, gaps, template compliance, and cross-validation"
      },
      {
        "phase_id": 8,
        "name": "WITW Equipment Mapping",
        "agents": ["witw_equipment_mapper"],
        "outputs": ["equipment_witw_mappings.json", "canonical_equipment.json", "custom_ids.json", "mapping_quality_report.json"],
        "validation_required": true,
        "description": "Map all equipment to War in the West game database IDs with deduplication, custom ID assignment for unmapped items, and historical validation. Target: 70%+ high-confidence mappings"
      }
    ]
  }
}
