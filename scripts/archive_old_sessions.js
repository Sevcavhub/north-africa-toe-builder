#!/usr/bin/env node

/**
 * Archive Old Session Directories - ONE-TIME MIGRATION
 *
 * Moves all scattered autonomous_* session directories to a centralized
 * sessions/ archive directory.
 *
 * After consolidation to canonical locations, these session directories
 * contain historical work that should be preserved but not actively used.
 *
 * Usage: npm run archive:sessions
 *
 * Created: 2025-10-14
 * Part of: Architecture v4.0
 */

const fs = require('fs').promises;
const path = require('path');
const paths = require('./lib/canonical_paths');

/**
 * Find all session directories to archive
 */
async function findSessionDirectories() {
    const outputDir = paths.OUTPUT_ROOT;
    const sessionsToArchive = [];

    try {
        const entries = await fs.readdir(outputDir, { withFileTypes: true });

        for (const entry of entries) {
            if (entry.isDirectory()) {
                // Match autonomous_* or session_* patterns
                if (entry.name.match(/^(autonomous_|session_)\d+/)) {
                    const fullPath = path.join(outputDir, entry.name);
                    const stats = await fs.stat(fullPath);

                    sessionsToArchive.push({
                        name: entry.name,
                        path: fullPath,
                        mtime: stats.mtimeMs
                    });
                }
            }
        }
    } catch (error) {
        console.error(`‚ùå Error scanning output directory:`, error.message);
        throw error;
    }

    // Sort by modification time (oldest first)
    sessionsToArchive.sort((a, b) => a.mtime - b.mtime);

    return sessionsToArchive;
}

/**
 * Archive session directories
 */
async function archiveSessions(sessions) {
    // Ensure sessions archive directory exists
    await fs.mkdir(paths.SESSIONS_DIR, { recursive: true });

    const stats = {
        total: sessions.length,
        archived: 0,
        errors: []
    };

    console.log(`\nüì¶ Archiving ${sessions.length} session directories...\n`);

    for (const session of sessions) {
        const archivePath = path.join(paths.SESSIONS_DIR, session.name);

        try {
            // Check if already archived (shouldn't happen, but check anyway)
            try {
                await fs.access(archivePath);
                console.log(`‚ö†Ô∏è  ${session.name}: Already archived, skipping`);
                continue;
            } catch (error) {
                // Doesn't exist, good to archive
            }

            // Move directory to archive
            await fs.rename(session.path, archivePath);
            stats.archived++;
            console.log(`‚úÖ ${session.name} ‚Üí sessions/`);
        } catch (error) {
            stats.errors.push({
                session: session.name,
                error: error.message
            });
            console.error(`‚ùå Error archiving ${session.name}:`, error.message);
        }
    }

    return stats;
}

/**
 * Generate archive report
 */
async function generateArchiveReport(sessions, stats) {
    const reportPath = path.join(paths.SESSIONS_DIR, 'ARCHIVE_INDEX.md');

    const report = `# Session Archive Index

**Date**: ${new Date().toISOString()}
**Status**: ‚úÖ Archive Complete

---

## Summary

- **Total Sessions Archived**: ${stats.archived}
- **Errors**: ${stats.errors.length}

---

## Archived Sessions (Chronological Order)

${sessions.map((s, i) => `
${i + 1}. **${s.name}**
   - Last Modified: ${new Date(s.mtime).toLocaleString()}
   - Location: \`data/output/sessions/${s.name}/\`
`).join('\n')}

---

## Archive Structure

\`\`\`
data/output/sessions/
${sessions.map(s => `‚îú‚îÄ‚îÄ ${s.name}/`).join('\n')}
\`\`\`

---

## Important Notes

‚ö†Ô∏è  **DO NOT USE THESE DIRECTORIES FOR NEW WORK**

**Canonical locations** (always use these):
- \`data/output/units/\` - Ground unit TO&E files (213 files)
- \`data/output/chapters/\` - MDBook chapters (213 files)
- \`data/output/air_units/\` - Air force units (Phase 7+)
- \`data/output/scenarios/\` - Battle scenarios (Phase 9+)

These archived directories contain historical extraction work:
- Session-specific reports and logs
- Intermediate research notes
- Multiple copies of units (use canonical version instead)
- Validation logs and checkpoints

For current unit data, ALWAYS use canonical locations above.

---

${stats.errors.length > 0 ? `## Errors

${stats.errors.map(e => `- **${e.session}**: ${e.error}`).join('\n')}

` : ''}

Generated by scripts/archive_old_sessions.js
`;

    await fs.writeFile(reportPath, report);
    console.log(`\nüìÑ Archive index: ${reportPath}\n`);
}

/**
 * Main execution
 */
async function main() {
    console.log('\n' + '='.repeat(80));
    console.log('  üì¶ ARCHIVE OLD SESSION DIRECTORIES');
    console.log('  Architecture v4.0 Migration');
    console.log('='.repeat(80) + '\n');

    console.log('üîç Finding session directories to archive...');
    const sessions = await findSessionDirectories();

    if (sessions.length === 0) {
        console.log('\n‚úÖ No session directories found to archive.');
        console.log('   All directories already in canonical locations.\n');
        return;
    }

    console.log(`‚úÖ Found ${sessions.length} session directories\n`);

    // Show what will be archived
    console.log('üìã Sessions to archive:');
    sessions.slice(0, 10).forEach(s => {
        console.log(`   - ${s.name} (${new Date(s.mtime).toLocaleDateString()})`);
    });
    if (sessions.length > 10) {
        console.log(`   ... and ${sessions.length - 10} more\n`);
    } else {
        console.log('');
    }

    // Archive sessions
    const stats = await archiveSessions(sessions);

    console.log('\n' + '='.repeat(80));
    console.log('  ‚úÖ ARCHIVE COMPLETE');
    console.log('='.repeat(80));
    console.log('');
    console.log(`üìä Results:`);
    console.log(`   Total sessions: ${stats.total}`);
    console.log(`   Archived: ${stats.archived}`);
    console.log(`   Errors: ${stats.errors.length}\n`);

    // Generate archive index
    await generateArchiveReport(sessions, stats);

    console.log('üí° Verify archive:');
    console.log(`   ls data/output/sessions/ | wc -l`);
    console.log(`   Should show: ${stats.archived} directories\n`);

    console.log('üí° Next steps:');
    console.log('   1. Run: npm run checkpoint');
    console.log('   2. Verify no autonomous_* directories remain:');
    console.log('      ls data/output/autonomous_* 2>/dev/null | wc -l');
    console.log('      (Should show: 0)\n');
}

// Run if called directly
if (require.main === module) {
    main().catch(error => {
        console.error('\n‚ùå Archive failed:', error.message);
        console.error(error.stack);
        process.exit(1);
    });
}

module.exports = { findSessionDirectories, archiveSessions };
